import nabii, { type INabiiV1 } from "@/.";
import { env } from "@utils/env";
import { describe, it, expect } from "vitest";
import { logger } from "@utils/logger";

nabii.v1.onError(err => {
	if ("response" in err) {
		logger.error(err.response?.data);
	} else {
		logger.error("No internet connection!");
	}
});

let [brickName]: INabiiV1.I[Brick]Types.I[Brick]<INabiiV1.Platform.APPLICATION>;
let admin[Brick]: INabiiV1.I[Brick]Types.I[Brick]<INabiiV1.Platform.ADMIN>;

describe("[Brick]", () => {
	it("Check if you can join the server", async () => {
		expect(await nabii.v1.resolve()).toBe(true);
	});
	it("Set mode to test", () => {
		nabii.v1.setMode("test");
		expect(nabii.v1.getMode()).toEqual("test");
	});
	it(`Set URL`, () => {
		expect(nabii.v1.setUrl(env.NABII_URL_V1).getUrl()).toEqual(
			env.NABII_URL_V1,
		);
	});
	it(`Set Lang`, () => {
		expect(nabii.v1.setLang("fr").getLang()).toEqual("fr");
	});
	it("Login to application", async () => {
		expect(
			await nabii.v1.Auth.login(
				env.LOGIN_EMAIL_V1,
				env.LOGIN_PASSWORD_V1
			)
		).toHaveProperty("accessToken");
	});
	it("Get all", async () => {
		expect(await nabii.v1.[Brick].getAll()).toHaveProperty("data");
	});
	it("Create", async () => {
		[brickName] = await nabii.v1.[Brick].create({
			// TODO: Add [brickName] create fields!
		});
		expect([brickName]).toHaveProperty("id");
	});
	it("Get one", async () => {
		expect(await nabii.v1.[Brick].getByPk([brickName].id)).toHaveProperty("id");
	});
	it("Update", async () => {
		expect(
			await nabii.v1.[Brick].update([brickName].id, {
				// TODO: Add [brickName] update fields!
			})
		).toHaveProperty("id");
	});
	it("Delete", async () => {
		expect(await nabii.v1.[Brick].delete([brickName].id)).toEqual(void 0);
	});
	it("Get all as administrator", async () => {
		expect(await nabii.v1.[Brick].Admin.getAll()).toHaveProperty("data");
	});
	it("Create as administrator", async () => {
		admin[Brick] = await nabii.v1.[Brick].Admin.create({
			// TODO: Add [brickName] create fields!
		});
		expect(admin[Brick]).toHaveProperty("id");
	});
	it("Get one as administrator", async () => {
		expect(
			await nabii.v1.[Brick].Admin.getByPk(admin[Brick].id)
		).toHaveProperty("id");
	});
	it("Update as administrator", async () => {
		expect(
			await nabii.v1.[Brick].Admin.update(admin[Brick].id, {
				// TODO: Add [brickName] update fields!
			})
		).toHaveProperty("id");
	});
	it("Delete as administrator", async () => {
		expect(await nabii.v1.[Brick].Admin.delete(admin[Brick].id)).toEqual(
			void 0
		);
	});
	it("Logout", async () => {
		expect(await nabii.v1.Auth.logout()).toEqual(void 0);
	});
});
